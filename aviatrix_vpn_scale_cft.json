{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Aviatrix Systems - Creates the necessary policies, roles, security group and launches Aviatrix Controller instance",
  "Metadata" :
  {
    "AWS::CloudFormation::Interface" :
    {
      "ParameterGroups" :
      [
        {
          "Label" : { "default":"Lambda function Configuration" },
          "Parameters" : [ "S3BucketParam" ]
        },
        {
          "Label" : { "default":"Aviatrix Controller VPN HA Configuration" },
          "Parameters" : [ "ControllerPublicIpParam", "AviatrixUserParam", "AviatrixPassParam" ]
        }
      ],
      "ParameterLabels" :
      {
         "S3BucketParam" : { "default" : "Enter S3 Bucket which has aviatrix_vpn_scale.py." },
         "ControllerPublicIpParam" : { "default" : "Enter public IP of Aviatrix Controller instance." },
         "AviatrixUserParam": { "default" : "Enter a valid Aviatrix Cloud account username." },
         "AviatrixPassParam": { "default" : "Enter Aviatrix Cloud account password for above username." },
         "MaxVPNUserLimitParam" : { "default" : "Enter Maximum VPN Users limit per gateway." }
      }
    }
  },
  "Parameters":
  {
    "S3BucketParam":
      {
        "Type": "String",
        "Description": "Enter S3 Bucket which has aviatrix_vpn_scale.py.",
      },
    "ControllerPublicIpParam":
      {
        "Type": "String",
        "Description": "Make sure it's an elastic IP.",
      },
      "AviatrixUserParam":
      {
        "Type": "String",
        "Description": "This username will be used to create session for launching new gateway."
      },
      "AviatrixPassParam":
      {
        "Type": "String",
        "Description": "Enter Aviatrix Cloud account password used for above username.",
        "NoEcho": true
      },
      "MaxVPNUserLimitParam":
      {
        "Type": "String",
        "Description": "New VPN gateway will be launched, if number of live VPN users per gateway in VPC exceeds this limit.",
      }
  },
  "Resources" :
  {
    "AviatrixRoleLambdaVPN" :
    {
      "Type": "AWS::IAM::Role",
      "Properties" :
      {
        "RoleName": "aviatrix-role-lambda-vpn",
        "AssumeRolePolicyDocument":
        {
          "Version" : "2012-10-17",
          "Statement":
          [
            {
              "Effect": "Allow",
              "Principal":
              {
                "Service": [ "lambda.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path" : "/",
        "Policies": [{
          "PolicyDocument" :
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ],
                    "Effect": "Allow",
                    "Resource": "arn:aws:logs:*:*:*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeSubnets"
                    ],
                    "Resource": "*"
                }
            ]
          },
          "PolicyName": "AviatrixLambdaVPNRolePolicy"
        }]
      }
    },
    "AviatrixVPNLambda" : {
       "Type" : "AWS::Lambda::Function",
       "Properties" : {
          "Code" : {"S3Bucket" : { "Ref" : "S3BucketParam" }, "S3Key" : "aviatrix_vpn_scale.zip"},
          "Environment" : {
            "Variables": { 
              "CONTROLLER_EIP" : { "Ref" : "ControllerPublicIpParam" },
              "AVIATRIX_USER" : { "Ref" : "AviatrixUserParam" },
              "AVIATRIX_PASS" : { "Ref" : "AviatrixPassParam" },
              "MAX_VPN_USERS_PER_GW" : { "Ref" : "MaxVPNUserLimitParam" }
            }
          },
          "FunctionName" : "aviatrix_vpn_scale",
          "Handler" : "aviatrix_vpn_scale.lambda_handler",
          "Role" : {"Fn::GetAtt": [ "AviatrixRoleLambdaVPN", "Arn" ]},
          "Runtime" : "python2.7",
          "Timeout" : "300",
       }
    },
    "AviatrixLambdaScheduleRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 hour)",
        "Targets": [
          {
            "Id": "AviatrixVPNLambdaScheduler",
            "Arn": {
              "Fn::GetAtt": [
                "AviatrixVPNLambda",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "InvokeLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AviatrixVPNLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AviatrixLambdaScheduleRule",
            "Arn"
          ]
        }
      }
    },
  },
  "Outputs" :
  {
    "AccountId" :
    {
      "Description": "Amazon Account ID",
      "Value" : { "Ref" : "AWS::AccountId" }
    }
  }
}
